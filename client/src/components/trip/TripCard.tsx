import React, { useState } from 'react';
import { TripCardProps } from '@/types/trip';
import JourneyMap from './JourneyMap';
import ItineraryList from './ItineraryList';
import { useIsMobile } from '@/hooks/use-mobile';

/**
 * TripCard displays a complete trip suggestion generated by the AI
 * It includes an interactive map, trip information, and a day-by-day itinerary
 */
const TripCard: React.FC<TripCardProps> = ({
  id,
  title,
  description,
  whyWeChoseThis,
  difficultyLevel,
  priceEstimate,
  duration,
  location,
  suggestedGuides,
  mapCenter,
  markers,
  journey,
  itinerary,
  onModifyRequest
}) => {
  const [isMapExpanded, setIsMapExpanded] = useState(false);
  const [activeTab, setActiveTab] = useState<'info' | 'itinerary'>('info');
  const [showFullDescription, setShowFullDescription] = useState(false);
  const isMobile = useIsMobile();

  // Toggle map expansion
  const toggleMapExpand = () => {
    setIsMapExpanded(!isMapExpanded);
  };

  // Calculate actual distance by summing up segment distances if available
  const calculateTotalDistance = () => {
    if (!journey?.segments || journey.segments.length === 0) return '0.0';

    let totalMeters = 0;
    journey.segments.forEach(segment => {
      if (segment.distance) {
        totalMeters += segment.distance;
      }
    });

    // Convert to miles (1 meter = 0.000621371 miles)
    return totalMeters > 0 ? (totalMeters * 0.000621371).toFixed(1) : '0.0';
  };

  // Calculate actual duration by summing up segment durations if available
  const calculateTotalDuration = () => {
    if (!journey?.segments || journey.segments.length === 0) return '0.0';

    let totalMinutes = 0;
    journey.segments.forEach(segment => {
      if (segment.duration) {
        // Convert seconds to minutes
        totalMinutes += segment.duration / 60;
      }
    });

    // Convert to hours and format
    return totalMinutes > 0 ? (totalMinutes / 60).toFixed(1) : '0.0';
  };

  // Get distance and duration from actual data
  const totalDistanceMiles = journey && journey.totalDistance 
    ? (journey.totalDistance * 0.000621371).toFixed(1) 
    : calculateTotalDistance();
  
  const totalDurationHours = journey && journey.totalDuration 
    ? (journey.totalDuration / 3600).toFixed(1) 
    : calculateTotalDuration();

  // Function to save trip to localStorage
  const saveTrip = () => {
    try {
      // Get existing saved trips or initialize empty array
      const savedTripsJSON = localStorage.getItem('savedTrips') || '[]';
      const savedTrips = JSON.parse(savedTripsJSON);
      
      // Check if this trip is already saved
      const isAlreadySaved = savedTrips.some((trip: any) => trip.id === id);
      
      if (!isAlreadySaved) {
        // Add this trip to saved trips with complete data
        savedTrips.push({
          id,
          title,
          description,
          whyWeChoseThis,
          difficultyLevel,
          priceEstimate,
          location,
          duration,
          mapCenter,
          markers,
          journey,
          itinerary,
          suggestedGuides,
          dateAdded: new Date().toISOString()
        });
        
        // Save back to localStorage
        localStorage.setItem('savedTrips', JSON.stringify(savedTrips));
        
        // Could show toast notification here
        alert('Trip saved successfully!');
      } else {
        alert('This trip is already saved!');
      }
    } catch (err) {
      console.error('Error saving trip:', err);
    }
  };

  return (
    <div className="w-full mb-10 border border-gray-200 rounded-lg shadow-sm overflow-hidden">
      <div className="w-full bg-white">
        {/* Trip Header - Always visible */}
        <div className="px-4 py-4 sm:p-6 border-b border-gray-100">
          <h2 className="text-xl sm:text-2xl font-bold mb-2 text-gray-800 break-words">{title}</h2>
          <div className="flex flex-wrap gap-2 mb-3">
            {location && (
              <span className="bg-blue-100 text-blue-700 text-xs px-2 py-1 rounded-full">
                {location}
              </span>
            )}
            {duration && (
              <span className="bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded-full">
                {duration}
              </span>
            )}
            {difficultyLevel && (
              <span className="bg-amber-100 text-amber-700 text-xs px-2 py-1 rounded-full">
                {difficultyLevel}
              </span>
            )}
            {priceEstimate && (
              <span className="bg-emerald-100 text-emerald-700 text-xs px-2 py-1 rounded-full">
                {priceEstimate}
              </span>
            )}
          </div>
          
          {/* Quick Stats - More compact on mobile */}
          <div className="flex flex-wrap gap-x-6 gap-y-1 text-sm text-gray-700 mb-2">
            <div className="flex items-center">
              <span className="font-medium mr-1">Distance:</span> {totalDistanceMiles} miles
            </div>
            <div className="flex items-center">
              <span className="font-medium mr-1">Duration:</span> ~{totalDurationHours} hrs
            </div>
          </div>
        </div>

        <div className="flex flex-col md:flex-row">
          {/* Left side: Trip details - Order changes on mobile */}
          <div className="order-2 md:order-1 p-4 sm:p-6 md:w-1/2">
            {/* Description - Shorter on mobile with option to expand */}
            <div className="mb-5">
              <p className="text-gray-700 text-sm sm:text-base">
                {isMobile && description.length > 150 && !showFullDescription
                  ? `${description.substring(0, 150)}...` 
                  : description}
              </p>
              {isMobile && description.length > 150 && (
                <button 
                  onClick={() => setShowFullDescription(!showFullDescription)}
                  className="text-xs text-[#655590] mt-1 font-medium"
                >
                  {showFullDescription ? "Show less" : "Read more"}
                </button>
              )}
            </div>
            
            {/* Tab navigation */}
            <div className="flex border-b mb-4">
              <button
                onClick={() => setActiveTab('info')}
                className={`px-3 sm:px-4 py-2 text-sm font-medium ${
                  activeTab === 'info' 
                    ? 'border-b-2 border-gray-700 text-gray-700' 
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                Why We Chose This
              </button>
              <button
                onClick={() => setActiveTab('itinerary')}
                className={`px-3 sm:px-4 py-2 text-sm font-medium ${
                  activeTab === 'itinerary' 
                    ? 'border-b-2 border-gray-700 text-gray-700' 
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                Itinerary
              </button>
            </div>
            
            {/* Tab content - Adjusted height for mobile */}
            <div className="text-sm max-h-[60vh] md:max-h-96 overflow-y-auto pr-1">
              {activeTab === 'info' ? (
                <div>
                  <h3 className="font-medium text-base mb-2">Why We Chose This For You</h3>
                  <p className="text-gray-600">{whyWeChoseThis}</p>
                </div>
              ) : (
                <ItineraryList itinerary={itinerary} suggestedGuides={suggestedGuides} />
              )}
            </div>
          </div>
          
          {/* Right side: Map - Takes up full width on mobile */}
          <div className="order-1 md:order-2 md:w-1/2 h-[300px] md:h-auto">
            <JourneyMap
              mapId={`map-${id}`}
              center={mapCenter}
              markers={markers}
              journey={journey}
              isExpanded={isMapExpanded}
              toggleExpand={toggleMapExpand}
            />
          </div>
        </div>
      </div>
      
      {/* Action buttons - Fixed to bottom on mobile */}
      <div className="flex justify-between items-center p-3 sm:p-4 border-t border-gray-100">
        <button
          onClick={() => onModifyRequest(id)}
          className="text-[#655590] hover:text-[#655590]/80 font-medium text-sm flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
          </svg>
          Modify Trip
        </button>
        <button
          onClick={saveTrip}
          className="bg-green-100 hover:bg-green-200 text-green-700 px-3 sm:px-4 py-2 rounded-md transition-colors text-sm flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
          </svg>
          Save Trip
        </button>
      </div>
    </div>
  );
};

export default TripCard;